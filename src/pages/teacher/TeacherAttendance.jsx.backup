import React, { useState, useEffect, useCallback } from "react";
import {
  message,
  Button,
  Card,
  Row,
  Col,
  Statistic,
  const handleCheckOut = async () => {
    try {
      setLoading(true);
      const result = await teacherCheckOut(currentUser.uid);
      message.success(result.message);
      fetchTodayStatus(); // Refresh status
    } catch (error) {
      message.error(error.message || "L·ªói khi check-out");
    } finally {
      setLoading(false);
    }
  };

  // TEST FUNCTIONS - DELETE AFTER TESTING
  const handleTestCheckIn = async () => {
    try {
      setLoading(true);
      // Override the current date for testing
      const originalDate = new Date();
      const testDateJs = testDate.toDate();
      
      console.log("üß™ Test check-in for date:", testDate.format("YYYY-MM-DD"));
      console.log("üß™ Current time set to:", testDateJs);
      
      const result = await teacherCheckIn(currentUser.uid, testDateJs);
      message.success(`‚úÖ Test check-in th√†nh c√¥ng cho ng√†y ${testDate.format("DD/MM/YYYY")}: ${result.message}`);
      fetchTodayStatus(); // Refresh status
    } catch (error) {
      message.error(`‚ùå Test check-in th·∫•t b·∫°i: ${error.message || "L·ªói khi check-in"}`);
    } finally {
      setLoading(false);
    }
  };

  const handleTestCheckOut = async () => {
    try {
      setLoading(true);
      const testDateJs = testDate.toDate();
      
      console.log("üß™ Test check-out for date:", testDate.format("YYYY-MM-DD"));
      
      const result = await teacherCheckOut(currentUser.uid, testDateJs);
      message.success(`‚úÖ Test check-out th√†nh c√¥ng cho ng√†y ${testDate.format("DD/MM/YYYY")}: ${result.message}`);
      fetchTodayStatus(); // Refresh status
    } catch (error) {
      message.error(`‚ùå Test check-out th·∫•t b·∫°i: ${error.message || "L·ªói khi check-out"}`);
    } finally {
      setLoading(false);
    }
  };Tag,
  Modal,
  Alert,
  Divider,
  List,
  Typography,
  DatePicker,
} from "antd";
import {
  FaClock,
  FaSignInAlt,
  FaSignOutAlt,
  FaCalendarAlt,
  FaChartLine,
  FaUser,
  FaCheckCircle,
  FaBookOpen,
  FaTimesCircle,
} from "react-icons/fa";
import {
  teacherCheckIn,
  teacherCheckOut,
  getTeacherTodayStatus,
  getTeacherAttendanceByDateRange,
  getTeacherAttendanceStats,
} from "../../service/attendanceService";
import { useAuth } from "../../context/AuthContext";
import dayjs from "dayjs";

const { Text, Title } = Typography;

export default function TeacherAttendance() {
  const { currentUser } = useAuth();
  const [loading, setLoading] = useState(false);
  const [todayStatus, setTodayStatus] = useState(null);
  const [monthlyStats, setMonthlyStats] = useState(null);
  const [attendanceHistory, setAttendanceHistory] = useState([]);
  const [statsVisible, setStatsVisible] = useState(false);
  
  // State for testing - date picker
  const [testDate, setTestDate] = useState(dayjs());
  const [showTestControls, setShowTestControls] = useState(false);

  // Fetch today's status and schedule
  const fetchTodayStatus = useCallback(async () => {
    try {
      console.log("üîç Fetching today status for:", currentUser.uid);
      const today = dayjs().format("YYYY-MM-DD");
      console.log("üìÖ Date:", today);

      const status = await getTeacherTodayStatus(currentUser.uid, today);
      console.log("‚úÖ Status loaded:", status);
      setTodayStatus(status);
    } catch (error) {
      console.error("‚ùå Error fetching today's status:", error);
      message.error("Kh√¥ng th·ªÉ t·∫£i tr·∫°ng th√°i h√¥m nay");
      // Set default status to prevent infinite loading
      setTodayStatus({
        hasSchedule: false,
        expectedCheckIn: null,
        expectedCheckOut: null,
        periods: [],
        totalPeriods: 0,
        hasCheckedIn: false,
        hasCheckedOut: false,
        checkInData: null,
        checkOutData: null,
        canCheckIn: false,
        canCheckOut: false,
      });
    }
  }, [currentUser.uid]);

  const fetchMonthlyStats = useCallback(async () => {
    try {
      const startDate = dayjs().startOf("month").format("YYYY-MM-DD");
      const endDate = dayjs().endOf("month").format("YYYY-MM-DD");
      const stats = await getTeacherAttendanceStats(
        currentUser.uid,
        startDate,
        endDate
      );
      setMonthlyStats(stats);
    } catch (error) {
      console.error("Error fetching monthly stats:", error);
      // Set empty stats to prevent errors
      setMonthlyStats({
        stats: {
          totalSessions: 0,
          present: 0,
          attendanceRate: 0,
          totalHoursWorked: 0,
        },
        records: [],
      });
    }
  }, [currentUser.uid]);

  const fetchAttendanceHistory = useCallback(async () => {
    try {
      const startDate = dayjs().startOf("month").format("YYYY-MM-DD");
      const endDate = dayjs().endOf("month").format("YYYY-MM-DD");
      const history = await getTeacherAttendanceByDateRange(
        currentUser.uid,
        startDate,
        endDate
      );
      setAttendanceHistory(history);
    } catch (error) {
      console.error("Error fetching attendance history:", error);
      // Set empty array to prevent errors
      setAttendanceHistory([]);
    }
  }, [currentUser.uid]);

  useEffect(() => {
    console.log("üöÄ Component mounted, currentUser:", currentUser?.uid);
    if (currentUser?.uid) {
      fetchTodayStatus();
      fetchMonthlyStats();
      fetchAttendanceHistory();
    }
  }, [
    currentUser?.uid,
    fetchTodayStatus,
    fetchMonthlyStats,
    fetchAttendanceHistory,
  ]);

  const handleCheckIn = async () => {
    try {
      setLoading(true);
      const result = await teacherCheckIn(currentUser.uid);
      message.success(result.message);
      fetchTodayStatus(); // Refresh status
    } catch (error) {
      message.error(error.message || "L·ªói khi check-in");
    } finally {
      setLoading(false);
    }
  };

  const handleCheckOut = async () => {
    try {
      setLoading(true);
      const result = await teacherCheckOut(currentUser.uid);
      message.success(
        `${result.message}. T·ªïng gi·ªù l√†m: ${result.workingHours}h`
      );
      fetchTodayStatus(); // Refresh status
      fetchMonthlyStats(); // Refresh stats
    } catch (error) {
      message.error(error.message || "L·ªói khi check-out");
    } finally {
      setLoading(false);
    }
  };

  // TEST FUNCTIONS - DELETE AFTER TESTING
  const handleTestCheckIn = async () => {
    try {
      setLoading(true);
      console.log("üß™ Test check-in for date:", testDate.format("YYYY-MM-DD"));
      
      const result = await teacherCheckIn(currentUser.uid);
      message.success(`‚úÖ Test check-in th√†nh c√¥ng cho ng√†y ${testDate.format("DD/MM/YYYY")}: ${result.message}`);
      fetchTodayStatus(); // Refresh status
    } catch (error) {
      message.error(`‚ùå Test check-in th·∫•t b·∫°i: ${error.message || "L·ªói khi check-in"}`);
    } finally {
      setLoading(false);
    }
  };

  const handleTestCheckOut = async () => {
    try {
      setLoading(true);
      console.log("üß™ Test check-out for date:", testDate.format("YYYY-MM-DD"));
      
      const result = await teacherCheckOut(currentUser.uid);
      message.success(`‚úÖ Test check-out th√†nh c√¥ng cho ng√†y ${testDate.format("DD/MM/YYYY")}: ${result.message}`);
      fetchTodayStatus(); // Refresh status
    } catch (error) {
      message.error(`‚ùå Test check-out th·∫•t b·∫°i: ${error.message || "L·ªói khi check-out"}`);
    } finally {
      setLoading(false);
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case "present":
        return "#52c41a";
      case "late":
        return "#faad14";
      case "early_leave":
        return "#ff7a45";
      case "completed":
        return "#1890ff";
      case "absent":
        return "#ff4d4f";
      default:
        return "#d9d9d9";
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case "present":
        return "ƒê√∫ng gi·ªù";
      case "late":
        return "ƒêi mu·ªôn";
      case "early_leave":
        return "V·ªÅ s·ªõm";
      case "completed":
        return "Ho√†n th√†nh";
      case "absent":
        return "V·∫Øng m·∫∑t";
      default:
        return "Ch∆∞a x√°c ƒë·ªãnh";
    }
  };

  const columns = [
    {
      title: "Ng√†y",
      dataIndex: "date",
      key: "date",
      render: (date) => dayjs(date).format("DD/MM/YYYY"),
    },
    {
      title: "Check-in",
      key: "checkIn",
      render: (_, record) => {
        if (record.checkInData) {
          return (
            <div>
              <Text strong>{record.checkInData.actualTime}</Text>
              <br />
              <Tag color={getStatusColor(record.checkInData.status)}>
                {getStatusText(record.checkInData.status)}
              </Tag>
            </div>
          );
        }
        return <Text type="secondary">Ch∆∞a check-in</Text>;
      },
    },
    {
      title: "Check-out",
      key: "checkOut",
      render: (_, record) => {
        if (record.checkOutData) {
          return (
            <div>
              <Text strong>{record.checkOutData.actualTime}</Text>
              <br />
              <Tag color={getStatusColor(record.checkOutData.status)}>
                {getStatusText(record.checkOutData.status)}
              </Tag>
            </div>
          );
        }
        return <Text type="secondary">Ch∆∞a check-out</Text>;
      },
    },
    {
      title: "Gi·ªù l√†m vi·ªác",
      key: "workingHours",
      render: (_, record) => {
        if (record.checkOutData && record.checkOutData.workingHours) {
          return `${record.checkOutData.workingHours}h`;
        }
        return <Text type="secondary">-</Text>;
      },
    },
    {
      title: "Ghi ch√∫",
      key: "notes",
      render: (_, record) => {
        const notes = [];
        if (record.checkInData?.note) notes.push(record.checkInData.note);
        if (record.checkOutData?.note) notes.push(record.checkOutData.note);
        return notes.length > 0 ? notes.join("; ") : "-";
      },
    },
  ];

  if (!currentUser) {
    return (
      <div style={{ padding: 24, textAlign: "center" }}>
        <FaClock size={48} color="#ccc" />
        <Title level={4}>ƒêang x√°c th·ª±c ng∆∞·ªùi d√πng...</Title>
      </div>
    );
  }

  if (!todayStatus) {
    return (
      <div style={{ padding: 24, textAlign: "center" }}>
        <FaClock size={48} color="#ccc" />
        <Title level={4}>ƒêang t·∫£i d·ªØ li·ªáu...</Title>
      </div>
    );
  }

  return (
    <div style={{ padding: 24, background: "#f0f2f5", minHeight: "100vh" }}>
      <div style={{ marginBottom: 24 }}>
        <Title level={2}>
          <FaClock style={{ marginRight: 8, color: "#1890ff" }} />
          ƒêi·ªÉm danh gi√°o vi√™n
        </Title>
        <Text type="secondary">
          Qu·∫£n l√Ω check-in/check-out v√† theo d√µi gi·ªù l√†m vi·ªác
        </Text>
      </div>

      {/* TEST CONTROLS - DELETE AFTER TESTING */}
      <Card
        title="üß™ Test Controls (X√≥a sau khi test)"
        style={{ marginBottom: 16, border: "2px dashed #ff4d4f" }}
        size="small"
      >
        <Row gutter={16} align="middle">
          <Col>
            <Text>Ch·ªçn ng√†y test:</Text>
          </Col>
          <Col>
            <DatePicker
              value={testDate}
              onChange={(date) => setTestDate(date)}
              format="DD/MM/YYYY"
              placeholder="Ch·ªçn ng√†y"
            />
          </Col>
          <Col>
            <Button 
              type="primary" 
              onClick={() => setShowTestControls(!showTestControls)}
              size="small"
            >
              {showTestControls ? '·∫®n' : 'Hi·ªán'} Test
            </Button>
          </Col>
          {showTestControls && (
            <>
              <Col>
                <Button 
                  type="primary" 
                  icon={<FaSignInAlt />}
                  onClick={handleTestCheckIn}
                  loading={loading}
                  size="small"
                >
                  Test Check-in
                </Button>
              </Col>
              <Col>
                <Button 
                  type="default" 
                  icon={<FaSignOutAlt />}
                  onClick={handleTestCheckOut}
                  loading={loading}
                  size="small"
                >
                  Test Check-out
                </Button>
              </Col>
            </>
          )}
        </Row>
      </Card>

      {/* Today's Schedule Alert */}
      {!todayStatus.hasSchedule ? (
        <Alert
          message="Kh√¥ng c√≥ l·ªãch d·∫°y h√¥m nay"
          description="B·∫°n kh√¥ng c√≥ ti·∫øt d·∫°y n√†o trong l·ªãch tr√¨nh h√¥m nay."
          type="info"
          showIcon
          icon={<FaCalendarAlt />}
          style={{ marginBottom: 24 }}
        />
      ) : (
        <Alert
          message={`L·ªãch d·∫°y h√¥m nay: ${todayStatus.totalPeriods} ti·∫øt`}
          description={
            <div>
              <Text>
                Gi·ªù v√†o: <Text strong>{todayStatus.expectedCheckIn}</Text>
              </Text>
              <Divider type="vertical" />
              <Text>
                Gi·ªù v·ªÅ: <Text strong>{todayStatus.expectedCheckOut}</Text>
              </Text>
              <br />
              <Text type="secondary">
                C√°c ti·∫øt: {todayStatus.periods?.map((p) => p.period).join(", ")}
              </Text>
            </div>
          }
          type="success"
          showIcon
          icon={<FaBookOpen />}
          style={{ marginBottom: 24 }}
        />
      )}

      {/* Check-in/Check-out Controls */}
      <Row gutter={16} style={{ marginBottom: 24 }}>
        <Col span={12}>
          <Card>
            <Row align="middle">
              <Col span={4}>
                <FaSignInAlt size={32} color="#52c41a" />
              </Col>
              <Col span={14}>
                <div>
                  <Title level={4} style={{ margin: 0 }}>
                    Check-in
                  </Title>
                  {todayStatus.hasCheckedIn ? (
                    <div>
                      <Text strong>{todayStatus.checkInData.actualTime}</Text>
                      <br />
                      <Tag
                        color={getStatusColor(todayStatus.checkInData.status)}
                      >
                        {getStatusText(todayStatus.checkInData.status)}
                      </Tag>
                    </div>
                  ) : (
                    <Text type="secondary">Ch∆∞a check-in</Text>
                  )}
                </div>
              </Col>
              <Col span={6}>
                <Button
                  type="primary"
                  size="large"
                  icon={<FaSignInAlt />}
                  loading={loading}
                  disabled={!todayStatus.canCheckIn}
                  onClick={handleCheckIn}
                  style={{ width: "100%" }}
                >
                  {todayStatus.hasCheckedIn ? "ƒê√£ check-in" : "Check-in"}
                </Button>
              </Col>
            </Row>
          </Card>
        </Col>

        <Col span={12}>
          <Card>
            <Row align="middle">
              <Col span={4}>
                <FaSignOutAlt size={32} color="#ff4d4f" />
              </Col>
              <Col span={14}>
                <div>
                  <Title level={4} style={{ margin: 0 }}>
                    Check-out
                  </Title>
                  {todayStatus.hasCheckedOut ? (
                    <div>
                      <Text strong>{todayStatus.checkOutData.actualTime}</Text>
                      <br />
                      <Tag
                        color={getStatusColor(todayStatus.checkOutData.status)}
                      >
                        {getStatusText(todayStatus.checkOutData.status)}
                      </Tag>
                    </div>
                  ) : (
                    <Text type="secondary">Ch∆∞a check-out</Text>
                  )}
                </div>
              </Col>
              <Col span={6}>
                <Button
                  type="primary"
                  size="large"
                  icon={<FaSignOutAlt />}
                  loading={loading}
                  disabled={!todayStatus.canCheckOut}
                  onClick={handleCheckOut}
                  style={{ width: "100%" }}
                  danger
                >
                  {todayStatus.hasCheckedOut ? "ƒê√£ check-out" : "Check-out"}
                </Button>
              </Col>
            </Row>
          </Card>
        </Col>
      </Row>

      {/* Monthly Statistics */}
      {monthlyStats && (
        <Card style={{ marginBottom: 24 }}>
          <Title level={4}>
            <FaChartLine style={{ marginRight: 8 }} />
            Th·ªëng k√™ th√°ng {dayjs().format("MM/YYYY")}
          </Title>
          <Row gutter={16}>
            <Col span={6}>
              <Statistic
                title="T·ªïng bu·ªïi d·∫°y"
                value={monthlyStats.stats?.totalSessions || 0}
                prefix={<FaCalendarAlt />}
              />
            </Col>
            <Col span={6}>
              <Statistic
                title="C√≥ m·∫∑t"
                value={monthlyStats.stats?.present || 0}
                valueStyle={{ color: "#52c41a" }}
                prefix={<FaCheckCircle />}
              />
            </Col>
            <Col span={6}>
              <Statistic
                title="T·ª∑ l·ªá tham gia"
                value={monthlyStats.stats?.attendanceRate || 0}
                suffix="%"
                valueStyle={{ color: "#1890ff" }}
                prefix={<FaUser />}
              />
            </Col>
            <Col span={6}>
              <Statistic
                title="T·ªïng gi·ªù l√†m"
                value={monthlyStats.stats?.totalHoursWorked || 0}
                suffix="h"
                valueStyle={{ color: "#722ed1" }}
                prefix={<FaClock />}
              />
            </Col>
          </Row>
        </Card>
      )}

      {/* Attendance History */}
      <Card>
        <div
          style={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            marginBottom: 16,
          }}
        >
          <Title level={4} style={{ margin: 0 }}>
            L·ªãch s·ª≠ ƒëi·ªÉm danh
          </Title>
          <Button icon={<FaChartLine />} onClick={() => setStatsVisible(true)}>
            Xem chi ti·∫øt
          </Button>
        </div>

        <Table
          columns={columns}
          dataSource={attendanceHistory}
          rowKey="date"
          pagination={{
            pageSize: 10,
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total, range) =>
              `${range[0]}-${range[1]} c·ªßa ${total} ng√†y`,
          }}
        />
      </Card>

      {/* Stats Modal */}
      <Modal
        title="Chi ti·∫øt th·ªëng k√™"
        open={statsVisible}
        onCancel={() => setStatsVisible(false)}
        footer={null}
        width={800}
      >
        {monthlyStats && (
          <div>
            <Row gutter={16} style={{ marginBottom: 24 }}>
              <Col span={8}>
                <Card>
                  <Statistic
                    title="T·ªïng bu·ªïi d·∫°y"
                    value={monthlyStats.stats?.totalSessions || 0}
                    prefix={<FaCalendarAlt />}
                  />
                </Card>
              </Col>
              <Col span={8}>
                <Card>
                  <Statistic
                    title="Bu·ªïi c√≥ m·∫∑t"
                    value={monthlyStats.stats?.present || 0}
                    valueStyle={{ color: "#52c41a" }}
                    prefix={<FaCheckCircle />}
                  />
                </Card>
              </Col>
              <Col span={8}>
                <Card>
                  <Statistic
                    title="Bu·ªïi v·∫Øng m·∫∑t"
                    value={monthlyStats.stats?.absent || 0}
                    valueStyle={{ color: "#ff4d4f" }}
                    prefix={<FaTimesCircle />}
                  />
                </Card>
              </Col>
            </Row>

            <Title level={5}>Chi ti·∫øt theo ng√†y:</Title>
            <List
              dataSource={monthlyStats.records || []}
              renderItem={(record) => (
                <List.Item>
                  <List.Item.Meta
                    title={dayjs(record.date).format("DD/MM/YYYY")}
                    description={
                      <div>
                        <Tag color={getStatusColor(record.status)}>
                          {getStatusText(record.status)}
                        </Tag>
                        {record.note && (
                          <Text type="secondary"> - {record.note}</Text>
                        )}
                      </div>
                    }
                  />
                  <div>
                    {record.timeSlot && <Text>{record.timeSlot}</Text>}
                    {record.subject && <br />}
                    {record.subject && (
                      <Text type="secondary">{record.subject}</Text>
                    )}
                  </div>
                </List.Item>
              )}
            />
          </div>
        )}
      </Modal>
    </div>
  );
}
