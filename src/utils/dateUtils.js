/**
 * Utility functions ƒë·ªÉ x·ª≠ l√Ω ng√†y th√°ng v√† th·ªùi kh√≥a bi·ªÉu
 */

/**
 * T√≠nh ng√†y th·ª±c t·∫ø d·ª±a tr√™n weekId v√† dayOfWeek
 * @param {string} weekId - ID tu·∫ßn (format: "YYYY-W##")
 * @param {string} dayOfWeek - Th·ª© trong tu·∫ßn ("monday", "tuesday", etc.)
 * @returns {string} - Ng√†y th·ª±c t·∫ø (format: "YYYY-MM-DD")
 */
export const calculateDateFromWeekAndDay = (weekId, dayOfWeek) => {
  try {
    console.log("üóìÔ∏è Calculating date from:", { weekId, dayOfWeek });

    // Parse weekId (v√≠ d·ª•: "2025-W31")
    const [year, weekPart] = weekId.split('-W');
    const weekNumber = parseInt(weekPart);

    if (!year || !weekNumber) {
      throw new Error(`Invalid weekId format: ${weekId}`);
    }

    // T√≠nh ng√†y ƒë·∫ßu tu·∫ßn (th·ª© 2) c·ªßa tu·∫ßn ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
    const firstDayOfYear = new Date(parseInt(year), 0, 1);
    
    // T√¨m th·ª© 2 ƒë·∫ßu ti√™n c·ªßa nƒÉm
    const firstMonday = new Date(firstDayOfYear);
    const dayOfWeekFirstDay = firstDayOfYear.getDay(); // 0 = Sunday, 1 = Monday, ...
    const daysToAdd = dayOfWeekFirstDay === 0 ? 1 : (8 - dayOfWeekFirstDay);
    firstMonday.setDate(firstDayOfYear.getDate() + daysToAdd);

    // T√≠nh th·ª© 2 c·ªßa tu·∫ßn c·∫ßn t√¨m
    const targetWeekMonday = new Date(firstMonday);
    targetWeekMonday.setDate(firstMonday.getDate() + (weekNumber - 1) * 7);

    // Map dayOfWeek th√†nh s·ªë ng√†y c·∫ßn c·ªông th√™m
    const dayOffsets = {
      'monday': 0,
      'tuesday': 1,
      'wednesday': 2,
      'thursday': 3,
      'friday': 4,
      'saturday': 5,
      'sunday': 6
    };

    const dayOffset = dayOffsets[dayOfWeek.toLowerCase()];
    if (dayOffset === undefined) {
      throw new Error(`Invalid dayOfWeek: ${dayOfWeek}`);
    }

    // T√≠nh ng√†y cu·ªëi c√πng
    const targetDate = new Date(targetWeekMonday);
    targetDate.setDate(targetWeekMonday.getDate() + dayOffset);

    // Format th√†nh YYYY-MM-DD
    const formattedDate = targetDate.toISOString().split('T')[0];

    console.log("‚úÖ Date calculated:", {
      weekId,
      dayOfWeek,
      calculatedDate: formattedDate,
      targetWeekMonday: targetWeekMonday.toISOString().split('T')[0]
    });

    return formattedDate;
  } catch (error) {
    console.error("‚ùå Error calculating date:", error);
    throw error;
  }
};

/**
 * T√≠nh weekId t·ª´ ng√†y c·ª• th·ªÉ
 * @param {string|Date} date - Ng√†y (YYYY-MM-DD ho·∫∑c Date object)
 * @returns {string} - weekId (format: "YYYY-W##")
 */
export const getWeekIdFromDate = (date) => {
  try {
    const targetDate = typeof date === 'string' ? new Date(date) : date;
    const year = targetDate.getFullYear();
    
    // T√≠nh s·ªë tu·∫ßn trong nƒÉm
    const firstDayOfYear = new Date(year, 0, 1);
    const daysDifference = Math.floor((targetDate - firstDayOfYear) / (24 * 60 * 60 * 1000));
    const weekNumber = Math.ceil((daysDifference + firstDayOfYear.getDay() + 1) / 7);
    
    return `${year}-W${weekNumber.toString().padStart(2, '0')}`;
  } catch (error) {
    console.error("‚ùå Error getting weekId from date:", error);
    throw error;
  }
};

/**
 * L·∫•y th·ª© trong tu·∫ßn t·ª´ ng√†y
 * @param {string|Date} date - Ng√†y
 * @returns {string} - Th·ª© trong tu·∫ßn ("monday", "tuesday", etc.)
 */
export const getDayOfWeekFromDate = (date) => {
  try {
    const targetDate = typeof date === 'string' ? new Date(date) : date;
    const dayNames = [
      'sunday', 'monday', 'tuesday', 'wednesday', 
      'thursday', 'friday', 'saturday'
    ];
    
    return dayNames[targetDate.getDay()];
  } catch (error) {
    console.error("‚ùå Error getting day of week:", error);
    throw error;
  }
};

/**
 * T√≠nh tu·∫ßn hi·ªán t·∫°i
 * @returns {string} - weekId c·ªßa tu·∫ßn hi·ªán t·∫°i
 */
export const getCurrentWeekId = () => {
  return getWeekIdFromDate(new Date());
};

/**
 * L·∫•y t·∫•t c·∫£ ng√†y trong tu·∫ßn t·ª´ weekId
 * @param {string} weekId - ID tu·∫ßn
 * @returns {Object} - Object ch·ª©a t·∫•t c·∫£ ng√†y trong tu·∫ßn
 */
export const getAllDatesInWeek = (weekId) => {
  try {
    const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
    const weekDates = {};
    
    days.forEach(day => {
      weekDates[day] = calculateDateFromWeekAndDay(weekId, day);
    });
    
    return weekDates;
  } catch (error) {
    console.error("‚ùå Error getting all dates in week:", error);
    throw error;
  }
};

/**
 * Validate v√† format ng√†y cho timetable session
 * @param {string} weekId - ID tu·∫ßn
 * @param {string} dayOfWeek - Th·ª© trong tu·∫ßn
 * @returns {Object} - Object ch·ª©a th√¥ng tin ng√†y ƒë√£ validate
 */
export const validateAndFormatTimetableDate = (weekId, dayOfWeek) => {
  try {
    const calculatedDate = calculateDateFromWeekAndDay(weekId, dayOfWeek);
    const weekDates = getAllDatesInWeek(weekId);
    
    return {
      date: calculatedDate,
      weekId,
      dayOfWeek: dayOfWeek.toLowerCase(),
      weekDates,
      isValid: true
    };
  } catch (error) {
    console.error("‚ùå Error validating timetable date:", error);
    return {
      date: null,
      weekId,
      dayOfWeek,
      weekDates: {},
      isValid: false,
      error: error.message
    };
  }
};
