import {
  doc,
  setDoc,
  updateDoc,
  deleteDoc,
  collection,
  getDocs,
  query,
  orderBy,
  addDoc,
  getDoc,
  where,
  arrayUnion,
  arrayRemove,
} from "firebase/firestore";
import { db } from "./firebase";

/**
 * T√¨m teacher ID th·ª±c t·ª´ Firebase Auth UID ho·∫∑c t√™n
 * @param {string} authUid - Firebase Auth UID
 * @returns {Promise<string|null>} Teacher ID th·ª±c ho·∫∑c null
 */
export const findTeacherIdByAuthUid = async (authUid) => {
  try {
    console.log("üîç Finding teacher ID for auth UID:", authUid);

    const teachersCollection = collection(db, "teachers");

    // 1. Th·ª≠ t√¨m theo uid field (th·ª±c t·∫ø trong database)
    console.log("üîç Step 1: Finding by uid field...");
    const qByUid = query(teachersCollection, where("uid", "==", authUid));
    const uidSnapshot = await getDocs(qByUid);

    if (!uidSnapshot.empty) {
      const teacherId = uidSnapshot.docs[0].id;
      console.log("‚úÖ Found teacher by uid:", teacherId);
      return teacherId;
    }

    // 2. Th·ª≠ t√¨m theo authUid field (fallback cho data c≈©)
    console.log("üîç Step 2: Finding by authUid field (fallback)...");
    const qByAuthUid = query(
      teachersCollection,
      where("authUid", "==", authUid)
    );
    const authUidSnapshot = await getDocs(qByAuthUid);

    if (!authUidSnapshot.empty) {
      const teacherId = authUidSnapshot.docs[0].id;
      console.log("‚úÖ Found teacher by authUid:", teacherId);
      return teacherId;
    }

    // 3. Th·ª≠ xem authUid c√≥ ph·∫£i l√† teacherId lu√¥n kh√¥ng
    console.log("üîç Step 3: Checking if authUid is already a teacherId...");
    try {
      const teacherDoc = await getDoc(doc(db, "teachers", authUid));
      if (teacherDoc.exists()) {
        console.log("‚úÖ AuthUid is already a valid teacherId:", authUid);
        return authUid;
      }
    } catch (docError) {
      console.log("‚ùå AuthUid is not a valid teacherId");
    }

    // 4. L·∫•y t·∫•t c·∫£ teachers v√† log ƒë·ªÉ debug
    console.log("üîç Step 4: Getting all teachers for debug...");
    const allTeachers = await getTeachers();
    console.log(
      "üìö All teachers:",
      allTeachers.map((t) => ({
        id: t.id,
        name: t.name,
        uid: t.uid || "NO_UID",
        authUid: t.authUid || "NO_AUTH_UID",
      }))
    );

    // 5. Th·ª≠ t√¨m theo t√™n (fallback cho data c≈©)
    const possibleName = authUid.replace(/-/g, " ").toLowerCase();
    console.log("üîç Step 5: Searching by name fallback:", possibleName);

    const teacherByName = allTeachers.find(
      (t) =>
        t.name.toLowerCase().includes(possibleName) ||
        possibleName.includes(t.name.toLowerCase())
    );

    if (teacherByName) {
      console.log(
        "‚úÖ Found teacher by name match:",
        teacherByName.id,
        teacherByName.name
      );
      return teacherByName.id;
    }

    // 6. N·∫øu ch·ªâ c√≥ 1 teacher, tr·∫£ v·ªÅ teacher ƒë√≥ (cho development)
    if (allTeachers.length === 1) {
      console.log(
        "üîß Only one teacher found, using it:",
        allTeachers[0].id,
        allTeachers[0].name
      );
      return allTeachers[0].id;
    }

    console.log("‚ùå No teacher found for auth UID:", authUid);
    return null;
  } catch (error) {
    console.error("‚ùå Error finding teacher ID:", error);
    return null;
  }
};

/**
 * L·∫•y danh s√°ch t·∫•t c·∫£ gi√°o vi√™n, s·∫Øp x·∫øp theo t√™n.
 * @returns {Promise<Array>} M·ªôt m·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng gi√°o vi√™n.
 */
export const getTeachers = async () => {
  const teachersCollection = collection(db, "teachers");
  const q = query(teachersCollection, orderBy("name"));
  const querySnapshot = await getDocs(q);

  const teachers = [];
  for (const docSnapshot of querySnapshot.docs) {
    const teacherData = { id: docSnapshot.id, ...docSnapshot.data() };

    // L·∫•y th√¥ng tin c√°c m√¥n h·ªçc d·∫°y c·ªßa gi√°o vi√™n
    if (teacherData.subjectIds && Array.isArray(teacherData.subjectIds)) {
      const subjects = [];
      for (const subjectId of teacherData.subjectIds) {
        try {
          const subjectDoc = await getDoc(doc(db, subjectId));
          if (subjectDoc.exists()) {
            subjects.push(subjectDoc.data().name || "");
          }
        } catch (error) {
          console.error(
            `Kh√¥ng th·ªÉ l·∫•y m√¥n h·ªçc cho gi√°o vi√™n ${teacherData.id}:`,
            error
          );
        }
      }
      teacherData.subjects = subjects;
    } else {
      teacherData.subjects = [];
    }

    teachers.push(teacherData);
  }

  return teachers;
};

/**
 * L·∫•y th√¥ng tin m·ªôt gi√°o vi√™n c·ª• th·ªÉ theo ID
 * @param {string} teacherId ID c·ªßa gi√°o vi√™n
 * @returns {Promise<Object|null>} Th√¥ng tin gi√°o vi√™n
 */
export const getTeacherById = async (teacherId) => {
  const teacherRef = doc(db, "teachers", teacherId);
  const teacherSnap = await getDoc(teacherRef);

  if (!teacherSnap.exists()) {
    return null;
  }

  const teacherData = { id: teacherId, ...teacherSnap.data() };

  // L·∫•y th√¥ng tin c√°c m√¥n h·ªçc
  if (teacherData.subjectIds && Array.isArray(teacherData.subjectIds)) {
    const subjects = [];
    const subjectDetails = [];

    for (const subjectId of teacherData.subjectIds) {
      try {
        const subjectDoc = await getDoc(doc(db, subjectId));
        if (subjectDoc.exists()) {
          const subjectName = subjectDoc.data().name || "";
          subjects.push(subjectName);
          subjectDetails.push({
            id: subjectDoc.id,
            path: subjectId,
            name: subjectName,
            ...subjectDoc.data(),
          });
        }
      } catch (error) {
        console.error(
          `Kh√¥ng th·ªÉ l·∫•y m√¥n h·ªçc cho gi√°o vi√™n ${teacherId}:`,
          error
        );
      }
    }

    teacherData.subjects = subjects;
    teacherData.subjectDetails = subjectDetails;
  } else {
    teacherData.subjects = [];
    teacherData.subjectDetails = [];
  }

  return teacherData;
};

/**
 * Th√™m m·ªôt gi√°o vi√™n m·ªõi v√†o Firestore.
 * @param {object} teacherData D·ªØ li·ªáu gi√°o vi√™n t·ª´ form.
 * @returns {Promise<string>} ID c·ªßa gi√°o vi√™n v·ª´a ƒë∆∞·ª£c t·∫°o.
 */
export const addTeacher = async (teacherData) => {
  // T·∫°o ID gi√°o vi√™n m·ªõi
  const newTeacherId = `teacher_${Date.now()}`;
  const teacherRef = doc(db, "teachers", newTeacherId);

  // Chu·∫©n b·ªã d·ªØ li·ªáu gi√°o vi√™n
  const dataToSave = {
    name: teacherData.name,
    avatar: teacherData.avatar || "",
    experience: teacherData.experience || "",
    rating: teacherData.rating || 0,
    email: teacherData.email || "",
    phone: teacherData.phone || "",
    gender: teacherData.gender || "",
    facilityId: teacherData.facilityId || null,
    subjectIds: teacherData.subjectIds || [],
  };

  await setDoc(teacherRef, dataToSave);
  return newTeacherId;
};

/**
 * C·∫≠p nh·∫≠t th√¥ng tin c·ªßa m·ªôt gi√°o vi√™n ƒë√£ c√≥.
 * @param {string} teacherId ID c·ªßa gi√°o vi√™n c·∫ßn c·∫≠p nh·∫≠t.
 * @param {object} teacherData D·ªØ li·ªáu m·ªõi c·∫ßn c·∫≠p nh·∫≠t.
 */
export const updateTeacher = async (teacherId, teacherData) => {
  const teacherRef = doc(db, "teachers", teacherId);

  // Chu·∫©n b·ªã d·ªØ li·ªáu c·∫≠p nh·∫≠t
  const dataToUpdate = {};

  // Ch·ªâ c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng ƒë∆∞·ª£c cung c·∫•p
  if (teacherData.name !== undefined) dataToUpdate.name = teacherData.name;
  if (teacherData.avatar !== undefined)
    dataToUpdate.avatar = teacherData.avatar;
  if (teacherData.experience !== undefined)
    dataToUpdate.experience = teacherData.experience;
  if (teacherData.rating !== undefined)
    dataToUpdate.rating = teacherData.rating;
  if (teacherData.email !== undefined) dataToUpdate.email = teacherData.email;
  if (teacherData.phone !== undefined) dataToUpdate.phone = teacherData.phone;
  if (teacherData.gender !== undefined)
    dataToUpdate.gender = teacherData.gender;
  if (teacherData.facilityId !== undefined)
    dataToUpdate.facilityId = teacherData.facilityId;
  if (teacherData.subjectIds !== undefined)
    dataToUpdate.subjectIds = teacherData.subjectIds;

  await updateDoc(teacherRef, dataToUpdate);
};

/**
 * Th√™m m·ªôt m√¥n h·ªçc v√†o danh s√°ch m√¥n h·ªçc c·ªßa gi√°o vi√™n
 * @param {string} teacherId ID c·ªßa gi√°o vi√™n
 * @param {string} subjectId ID ho·∫∑c ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß c·ªßa m√¥n h·ªçc
 */
export const addSubjectToTeacher = async (teacherId, subjectId) => {
  const teacherRef = doc(db, "teachers", teacherId);

  // ƒê·∫£m b·∫£o subjectId c√≥ ƒë·ªãnh d·∫°ng ƒë√∫ng
  const fullSubjectPath = subjectId.includes("/")
    ? subjectId
    : `subjects/${subjectId}`;

  await updateDoc(teacherRef, {
    subjectIds: arrayUnion(fullSubjectPath),
  });
};

/**
 * X√≥a m·ªôt m√¥n h·ªçc kh·ªèi danh s√°ch m√¥n h·ªçc c·ªßa gi√°o vi√™n
 * @param {string} teacherId ID c·ªßa gi√°o vi√™n
 * @param {string} subjectId ID ho·∫∑c ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß c·ªßa m√¥n h·ªçc
 */
export const removeSubjectFromTeacher = async (teacherId, subjectId) => {
  const teacherRef = doc(db, "teachers", teacherId);

  // ƒê·∫£m b·∫£o subjectId c√≥ ƒë·ªãnh d·∫°ng ƒë√∫ng
  const fullSubjectPath = subjectId.includes("/")
    ? subjectId
    : `subjects/${subjectId}`;

  await updateDoc(teacherRef, {
    subjectIds: arrayRemove(fullSubjectPath),
  });
};

/**
 * X√≥a m·ªôt gi√°o vi√™n kh·ªèi Firestore.
 * @param {string} teacherId ID c·ªßa gi√°o vi√™n c·∫ßn x√≥a.
 */
export const deleteTeacher = async (teacherId) => {
  const teacherRef = doc(db, "teachers", teacherId);
  await deleteDoc(teacherRef);

  // X√≥a c√°c l·ªãch d·∫°y c·ªßa gi√°o vi√™n (n·∫øu c√≥)
  const scheduleCollection = collection(db, `teachers/${teacherId}/schedule`);
  const schedules = await getDocs(scheduleCollection);

  for (const scheduleDoc of schedules.docs) {
    await deleteDoc(scheduleDoc.ref);
  }
};

/**
 * L·∫•y l·ªãch d·∫°y c·ªßa gi√°o vi√™n t·ª´ Firestore.
 * @param {string} teacherId ID c·ªßa gi√°o vi√™n.
 * @returns {Promise<Array>} M·ªôt m·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng l·ªãch d·∫°y ƒë∆∞·ª£c s·∫Øp x·∫øp theo th·ªùi gian.
 */
export const getTeachingSchedule = async (teacherId) => {
  try {
    // Ki·ªÉm tra teacherId c√≥ h·ª£p l·ªá kh√¥ng
    if (!teacherId || typeof teacherId !== "string") {
      throw new Error("Teacher ID kh√¥ng h·ª£p l·ªá");
    }

    // Ki·ªÉm tra gi√°o vi√™n c√≥ t·ªìn t·∫°i kh√¥ng
    const teacherRef = doc(db, "teachers", teacherId);
    const teacherSnap = await getDoc(teacherRef);
    if (!teacherSnap.exists()) {
      throw new Error("Gi√°o vi√™n kh√¥ng t·ªìn t·∫°i");
    }

    const scheduleCollection = collection(db, `teachers/${teacherId}/schedule`);
    const q = query(scheduleCollection, orderBy("date"), orderBy("startTime"));
    const querySnapshot = await getDocs(q);

    const schedules = [];
    for (const docSnapshot of querySnapshot.docs) {
      const scheduleData = { id: docSnapshot.id, ...docSnapshot.data() };

      // L·∫•y th√¥ng tin b·ªï sung v·ªÅ l·ªõp h·ªçc n·∫øu c√≥
      if (scheduleData.classId) {
        try {
          const classDoc = await getDoc(
            doc(db, "classes", scheduleData.classId)
          );
          if (classDoc.exists()) {
            scheduleData.className = classDoc.data().name || "";
            scheduleData.classDetails = classDoc.data();
          }
        } catch (error) {
          console.error(
            `Kh√¥ng th·ªÉ l·∫•y th√¥ng tin l·ªõp h·ªçc ${scheduleData.classId}:`,
            error
          );
        }
      }

      // L·∫•y th√¥ng tin m√¥n h·ªçc n·∫øu c√≥
      if (scheduleData.subjectId) {
        try {
          const subjectDoc = await getDoc(doc(db, scheduleData.subjectId));
          if (subjectDoc.exists()) {
            scheduleData.subjectName = subjectDoc.data().name || "";
            scheduleData.subjectDetails = subjectDoc.data();
          }
        } catch (error) {
          console.error(
            `Kh√¥ng th·ªÉ l·∫•y th√¥ng tin m√¥n h·ªçc ${scheduleData.subjectId}:`,
            error
          );
        }
      }

      schedules.push(scheduleData);
    }

    return schedules;
  } catch (error) {
    console.error("L·ªói khi l·∫•y l·ªãch d·∫°y:", error);
    throw error;
  }
};

/**
 * L·∫•y l·ªãch d·∫°y c·ªßa gi√°o vi√™n trong kho·∫£ng th·ªùi gian c·ª• th·ªÉ
 * @param {string} teacherId ID c·ªßa gi√°o vi√™n
 * @param {string} startDate Ng√†y b·∫Øt ƒë·∫ßu (ƒë·ªãnh d·∫°ng YYYY-MM-DD)
 * @param {string} endDate Ng√†y k·∫øt th√∫c (ƒë·ªãnh d·∫°ng YYYY-MM-DD)
 * @returns {Promise<Array>} M·∫£ng l·ªãch d·∫°y trong kho·∫£ng th·ªùi gian
 */
export const getTeachingScheduleByDateRange = async (
  teacherId,
  startDate,
  endDate
) => {
  try {
    if (!teacherId || !startDate || !endDate) {
      throw new Error("Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt");
    }

    const scheduleCollection = collection(db, `teachers/${teacherId}/schedule`);
    const q = query(
      scheduleCollection,
      where("date", ">=", startDate),
      where("date", "<=", endDate),
      orderBy("date"),
      orderBy("startTime")
    );

    const querySnapshot = await getDocs(q);
    return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
  } catch (error) {
    console.error("L·ªói khi l·∫•y l·ªãch d·∫°y theo kho·∫£ng th·ªùi gian:", error);
    throw error;
  }
};

/**
 * Th√™m l·ªãch d·∫°y m·ªõi cho gi√°o vi√™n
 * @param {string} teacherId ID c·ªßa gi√°o vi√™n
 * @param {object} scheduleData D·ªØ li·ªáu l·ªãch d·∫°y
 * @returns {Promise<string>} ID c·ªßa l·ªãch d·∫°y v·ª´a ƒë∆∞·ª£c t·∫°o
 */
export const addTeachingSchedule = async (teacherId, scheduleData) => {
  try {
    if (!teacherId || !scheduleData) {
      throw new Error("Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt");
    }

    // Ki·ªÉm tra xung ƒë·ªôt l·ªãch d·∫°y
    const existingSchedules = await getTeachingScheduleByDateRange(
      teacherId,
      scheduleData.date,
      scheduleData.date
    );

    const hasConflict = existingSchedules.some((schedule) => {
      const existingStart = schedule.startTime;
      const existingEnd = schedule.endTime;
      const newStart = scheduleData.startTime;
      const newEnd = scheduleData.endTime;

      return newStart < existingEnd && newEnd > existingStart;
    });

    if (hasConflict) {
      throw new Error("Tr√πng l·ªãch d·∫°y trong khung gi·ªù n√†y");
    }

    const scheduleCollection = collection(db, `teachers/${teacherId}/schedule`);
    const docRef = await addDoc(scheduleCollection, {
      ...scheduleData,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    });

    return docRef.id;
  } catch (error) {
    console.error("L·ªói khi th√™m l·ªãch d·∫°y:", error);
    throw error;
  }
};

/**
 * C·∫≠p nh·∫≠t l·ªãch d·∫°y c·ªßa gi√°o vi√™n
 * @param {string} teacherId ID c·ªßa gi√°o vi√™n
 * @param {string} scheduleId ID c·ªßa l·ªãch d·∫°y
 * @param {object} updateData D·ªØ li·ªáu c·∫≠p nh·∫≠t
 * @returns {Promise<void>}
 */
export const updateTeachingSchedule = async (
  teacherId,
  scheduleId,
  updateData
) => {
  try {
    if (!teacherId || !scheduleId || !updateData) {
      throw new Error("Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt");
    }

    const scheduleRef = doc(db, `teachers/${teacherId}/schedule`, scheduleId);
    await updateDoc(scheduleRef, {
      ...updateData,
      updatedAt: new Date().toISOString(),
    });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t l·ªãch d·∫°y:", error);
    throw error;
  }
};

/**
 * X√≥a l·ªãch d·∫°y c·ªßa gi√°o vi√™n
 * @param {string} teacherId ID c·ªßa gi√°o vi√™n
 * @param {string} scheduleId ID c·ªßa l·ªãch d·∫°y
 * @returns {Promise<void>}
 */
export const deleteTeachingSchedule = async (teacherId, scheduleId) => {
  try {
    if (!teacherId || !scheduleId) {
      throw new Error("Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt");
    }

    const scheduleRef = doc(db, `teachers/${teacherId}/schedule`, scheduleId);
    await deleteDoc(scheduleRef);
  } catch (error) {
    console.error("L·ªói khi x√≥a l·ªãch d·∫°y:", error);
    throw error;
  }
};

/**
 * L·∫•y danh s√°ch m√¥n h·ªçc t·ª´ Firestore.
 * @returns {Promise<Array>} M·ªôt m·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng m√¥n h·ªçc.
 */
export const getSubjects = async () => {
  const subjectsCollection = collection(db, "subjects");
  const querySnapshot = await getDocs(subjectsCollection);
  return querySnapshot.docs.map((doc) => ({
    id: doc.id,
    ...doc.data(),
    path: `subjects/${doc.id}`,
  }));
};

/**
 * L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt m√¥n h·ªçc theo ID
 * @param {string} subjectId ID c·ªßa m√¥n h·ªçc
 * @returns {Promise<Object|null>} Th√¥ng tin m√¥n h·ªçc
 */
export const getSubjectById = async (subjectId) => {
  // Ki·ªÉm tra n·∫øu ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß ƒë∆∞·ª£c cung c·∫•p
  const isFullPath = subjectId.includes("/");
  const docRef = isFullPath
    ? doc(db, subjectId)
    : doc(db, "subjects", subjectId);

  const subjectSnap = await getDoc(docRef);
  if (subjectSnap.exists()) {
    return { id: subjectSnap.id, ...subjectSnap.data() };
  }
  return null;
};

/**
 * L·∫•y danh s√°ch gi√°o vi√™n d·∫°y m·ªôt m√¥n h·ªçc c·ª• th·ªÉ
 * @param {string} subjectId ID c·ªßa m√¥n h·ªçc
 * @returns {Promise<Array>} Danh s√°ch gi√°o vi√™n
 */
export const getTeachersBySubject = async (subjectId) => {
  const teachersCollection = collection(db, "teachers");
  let q;

  // T·∫°o ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß cho m√¥n h·ªçc
  const fullSubjectPath = subjectId.includes("/")
    ? subjectId
    : `subjects/${subjectId}`;

  q = query(
    teachersCollection,
    where("subjectIds", "array-contains", fullSubjectPath)
  );

  const querySnapshot = await getDocs(q);
  return querySnapshot.docs.map((doc) => ({
    id: doc.id,
    ...doc.data(),
  }));
};

/**
 * L·∫•y th·ªùi kh√≥a bi·ªÉu c·ªßa m·ªôt l·ªõp h·ªçc t·ª´ Firestore.
 * @param {string} classId ID c·ªßa l·ªõp h·ªçc
 * @returns {Promise<Array>} M·ªôt m·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng th·ªùi kh√≥a bi·ªÉu
 */
export const getClassTimetable = async (classId) => {
  const timetableCollection = collection(db, `classes/${classId}/timetable`);
  const querySnapshot = await getDocs(timetableCollection);
  return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
};

/**
 * L·∫•y th·ªùi kh√≥a bi·ªÉu c·ªßa l·ªõp cho tu·∫ßn c·ª• th·ªÉ
 * @param {string} classId ID c·ªßa l·ªõp h·ªçc
 * @param {string} weekId ID c·ªßa tu·∫ßn (ƒë·ªãnh d·∫°ng "YYYY-Wnn")
 * @returns {Promise<Object|null>} Th√¥ng tin th·ªùi kh√≥a bi·ªÉu c·ªßa tu·∫ßn
 */
export const getClassTimetableByWeek = async (classId, weekId) => {
  const docRef = doc(db, `classes/${classId}/timetable`, weekId);
  const docSnapshot = await getDoc(docRef);
  if (docSnapshot.exists()) {
    return { id: docSnapshot.id, ...docSnapshot.data() };
  } else {
    return null;
  }
};

/**
 * Th√™m m·ªõi m·ªôt th·ªùi kh√≥a bi·ªÉu cho l·ªõp h·ªçc
 * @param {string} classId ID c·ªßa l·ªõp h·ªçc
 * @param {string} weekId ID c·ªßa tu·∫ßn (ƒë·ªãnh d·∫°ng "YYYY-Wnn")
 * @param {object} timetableData D·ªØ li·ªáu th·ªùi kh√≥a bi·ªÉu
 * @returns {Promise<void>}
 */
export const addClassTimetable = async (classId, weekId, timetableData) => {
  const docRef = doc(db, `classes/${classId}/timetable`, weekId);
  await setDoc(docRef, timetableData);
};

/**
 * C·∫≠p nh·∫≠t th·ªùi kh√≥a bi·ªÉu hi·ªán c√≥ c·ªßa l·ªõp h·ªçc
 * @param {string} classId ID c·ªßa l·ªõp h·ªçc
 * @param {string} weekId ID c·ªßa tu·∫ßn (ƒë·ªãnh d·∫°ng "YYYY-Wnn")
 * @param {object} timetableData D·ªØ li·ªáu c·∫≠p nh·∫≠t
 * @returns {Promise<void>}
 */
export const updateClassTimetable = async (classId, weekId, timetableData) => {
  const docRef = doc(db, `classes/${classId}/timetable`, weekId);
  await updateDoc(docRef, timetableData);
};

/**
 * Th√™m m·ªôt slot th·ªùi kh√≥a bi·ªÉu v√†o tu·∫ßn c·ª• th·ªÉ
 * @param {string} classId ID c·ªßa l·ªõp h·ªçc
 * @param {string} weekId ID c·ªßa tu·∫ßn
 * @param {object} slotData Th√¥ng tin v·ªÅ slot (ng√†y, ti·∫øt, m√¥n h·ªçc, gi√°o vi√™n)
 * @returns {Promise<void>}
 */
export const addTimetableSlot = async (classId, weekId, slotData) => {
  const docRef = doc(db, `classes/${classId}/timetable`, weekId);
  const docSnapshot = await getDoc(docRef);

  if (docSnapshot.exists()) {
    // N·∫øu th·ªùi kh√≥a bi·ªÉu ƒë√£ t·ªìn t·∫°i
    const slots = docSnapshot.data().slots || [];
    slots.push(slotData);

    await updateDoc(docRef, { slots });
  } else {
    // T·∫°o m·ªõi th·ªùi kh√≥a bi·ªÉu
    await setDoc(docRef, {
      slots: [slotData],
      weekStart: slotData.weekStart || null,
      weekEnd: slotData.weekEnd || null,
    });
  }
};

/**
 * X√≥a m·ªôt slot th·ªùi kh√≥a bi·ªÉu t·ª´ tu·∫ßn c·ª• th·ªÉ
 * @param {string} classId ID c·ªßa l·ªõp h·ªçc
 * @param {string} weekId ID c·ªßa tu·∫ßn
 * @param {string} slotId ID c·ªßa slot c·∫ßn x√≥a
 * @returns {Promise<void>}
 */
export const removeTimetableSlot = async (classId, weekId, slotId) => {
  const docRef = doc(db, `classes/${classId}/timetable`, weekId);
  const docSnapshot = await getDoc(docRef);

  if (docSnapshot.exists()) {
    const slots = docSnapshot.data().slots || [];
    const updatedSlots = slots.filter((slot) => slot.id !== slotId);

    await updateDoc(docRef, { slots: updatedSlots });
  }
};

/**
 * L·∫•y danh s√°ch c√°c l·ªõp h·ªçc
 * @returns {Promise<Array>} M·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng l·ªõp h·ªçc
 */
export const getClasses = async () => {
  const classesCollection = collection(db, "classes");
  const querySnapshot = await getDocs(classesCollection);
  return querySnapshot.docs.map((doc) => ({
    id: doc.id,
    ...doc.data(),
  }));
};

/**
 * L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt l·ªõp h·ªçc
 * @param {string} classId ID c·ªßa l·ªõp h·ªçc
 * @returns {Promise<Object|null>} Th√¥ng tin l·ªõp h·ªçc
 */
export const getClassById = async (classId) => {
  const classRef = doc(db, "classes", classId);
  const classSnap = await getDoc(classRef);

  if (classSnap.exists()) {
    return { id: classId, ...classSnap.data() };
  }
  return null;
};
